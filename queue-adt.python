class node:
    def __init__(self,data):
        self.data=data
        self.next=None

class Queue:
    def __init__(self):
        self.front=None
        self.rear=None
        self._size=0

    def enqueue(self,data):
        newnode=node(data)
        if self.rear is None:
            self.front=self.rear=newnode
        else:
            self.rear.next=newnode
            self.rear=newnode
        self._size +=1

    def dequeue(self):
        if self.is_empty():
            raise Exception("Queue is empty.")
        dequeued=self.front.data
        self.front=self.front.next

        if self.front is None:
            self.rear=None
        self._size -=1
        return dequeued

    def front(self):
        if self.is_empty():
            raise Exception("queue is empty.")
        return self.front.data

    def is_empty(self):
        return self.front is None

    def size(self):
        return self._size

queue=Queue()
n=int(input())
for i in range(n):
    op=input().split()

    if op[0]=="enqueue":
        queue.enqueue(int(op[1]))
    elif op[0]=="dequeue":
        try:
             print(queue.dequeue())
        except Exception as e:
             print(e)
    elif op[0]=="size":
        print(queue.size())                                                         
